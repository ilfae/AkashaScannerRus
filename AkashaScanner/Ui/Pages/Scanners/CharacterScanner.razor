@inherits RazorComponent
@page "/scanners/character"

@using Core.DataCollections
@using Core.Scappers

@inject IConfig ScrapConfig
@inject ICharacterCollection CharacterCollection
@inject IScrapper<ICharacterConfig> CharacterScrapper

<Scanner Model="@Data" Enabled="@Enabled" OnSubmit="@HandleSubmit">
    <Instructions>
        <li>При необходимости обновите приведенные ниже данные об игре.</li>
        <li>Заполните приведенные ниже параметры (необязательно).</li>
        <li>Начните игру. В данный момент игра находится в режиме <ProcessStatusDisplay />.</li>
        <li>Откройте экран "Ваши персонажи" и отсортируйте их по уровню в порядке убывания.</li>
        <li>Выберите своего первого персонажа и убедитесь, что левое меню (Атрибуты, оружие, артефакты и т.д.) полностью видно.</li>
        <li>Нажмите кнопку "Старт" ниже, чтобы начать сканирование. Пожалуйста, не перемещайте мышь и не нажимайте никаких кнопок.</li>
        <li>Если вы хотите прервать сканирование, сверните игру или выйдите из нее (используя Alt+Tab).</li>
    </Instructions>
    <DataUpdates>
        <DataUpdate Title="Персонажи" Collection="@CharacterCollection" Status="@CharacterCollectionStatus" EntryType="@(typeof(CharacterEntry))" />
    </DataUpdates>
    <Options>
        <Field Label="@MinLevelLabel">
            <InputNumber class="input" DisplayName="@MinLevelLabel" @bind-Value="Data.CharacterMinLevel" />
        </Field>
        <Field Label="@WandererNameLabel">
            <InputText class="input" DisplayName="@WandererNameLabel" @bind-Value="WandererName" />
        </Field>
    </Options>
</Scanner>

@code {
    private const string MinLevelLabel = "Минимальный уровень";
    private const string WandererNameLabel = "Имя странника";

    private ICharacterConfig Data = new DefaultFormData();

    [Flux.GetDataCollectionStatus(typeof(CharacterEntry))]
    public Flux.DataCollectionStatus CharacterCollectionStatus { get; set; } = default!;

    [Flux.GetProcessStatus]
    public ProcessStatus Status { get; set; }

    public bool Enabled => CharacterCollectionStatus.IsAvailable;

    private string WandererName { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Initialize();
        await ScrapConfig.Load();
        Data = new FormData(ScrapConfig);
    }

    public bool HandleSubmit()
    {
        if (string.IsNullOrEmpty(WandererName))
            ScrapConfig.CharacterNameOverrides.Remove("Wanderer");
        else
            ScrapConfig.CharacterNameOverrides["Wanderer"] = WandererName;
        ScrapConfig.Save();
        return CharacterScrapper.Start(Data);
    }

    public override void Dispose()
    {
        base.Dispose();
        CharacterScrapper.Dispose();
    }

    private class FormData : ICharacterConfig
    {
        private readonly ICharacterConfig ScrapConfig;

        public FormData(ICharacterConfig scrapConfig)
        {
            ScrapConfig = scrapConfig;
        }

        [Display(Name = MinLevelLabel)]
        [Required]
        [Range(1, 90)]
        public int CharacterMinLevel { get => ScrapConfig.CharacterMinLevel; set => ScrapConfig.CharacterMinLevel = value; }

        [Display(Name = WandererNameLabel)]
        public Dictionary<string, string> CharacterNameOverrides { get => ScrapConfig.CharacterNameOverrides; set => ScrapConfig.CharacterNameOverrides = value; }
    }

    private class DefaultFormData : ICharacterConfig
    {
        public int CharacterMinLevel { get; set; }
        public Dictionary<string, string> CharacterNameOverrides { get; set; } = new();
    }
}
