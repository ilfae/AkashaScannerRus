@inherits RazorComponent
@page "/scanners/weapon"

@using Core.DataCollections
@using Core.Scappers

@inject IConfig ScrapConfig
@inject IWeaponCollection WeaponCollection
@inject ICharacterCollection CharacterCollection
@inject IScrapper<IWeaponConfig> WeaponScrapper

<Scanner Model="@Data" Enabled="@Enabled" OnSubmit="@HandleSubmit">
    <Instructions>
        <li>При необходимости обновите приведенные ниже данные об игре.</li>
        <li>Заполните приведенные ниже параметры.</li>
        <li>Начните игру. В данный момент игра находится в режиме <ProcessStatusDisplay />.</li>
        <li>Откройте инвентарь. Выберите вкладку <b>"Оружие"</b>.</li>
        <li>Сортируйте элементы в <b>порядке убывания</b>.</li>
        <li>Прокрутите до самого верха, чтобы первая строка была видна полностью.</li>
        <li>Убедитесь, что название оружия с правой стороны также полностью видно.</li>
        <li>Нажмите кнопку "Старт" ниже, чтобы начать сканирование. Пожалуйста, не перемещайте мышь и не нажимайте никаких кнопок.</li>
        <li>Если вы хотите прервать сканирование, сверните игру или выйдите из нее (используя Alt+Tab).</li>
    </Instructions>
    <DataUpdates>
        <DataUpdate Title="Оружие" Collection="@WeaponCollection" Status="@WeaponCollectionStatus" EntryType="@(typeof(WeaponEntry))" />
        <DataUpdate Title="Персонажи" Collection="@CharacterCollection" Status="@CharacterCollectionStatus" EntryType="@(typeof(CharacterEntry))" />
    </DataUpdates>
    <Options>
        <Field Label="@TravelerNameLabel">
            <InputText class="input" DisplayName="@TravelerNameLabel" @bind-Value="Data.TravelerName" />
        </Field>
        <Field Label="@WandererNameLabel">
            <InputText class="input" DisplayName="@WandererNameLabel" @bind-Value="WandererName" />
        </Field>
        <Field Label="@MinLevelLabel">
            <InputNumber class="input" DisplayName="@MinLevelLabel" @bind-Value="Data.WeaponMinLevel" />
        </Field>
        <Field Label="@MinRarityLabel">
            <InputNumber class="input" DisplayName="@MinRarityLabel" @bind-Value="Data.WeaponMinRarity" />
        </Field>
    </Options>
</Scanner>

@code {
    private const string TravelerNameLabel = "Имя путешественника";
    private const string WandererNameLabel = "Имя странника";
    private const string MinLevelLabel = "Минимальный уровень";
    private const string MinRarityLabel = "Минимальная редкость";

    private IWeaponConfig Data = new DefaultFormData();

    [Flux.GetDataCollectionStatus(typeof(WeaponEntry))]
    public Flux.DataCollectionStatus WeaponCollectionStatus { get; set; } = default!;

    [Flux.GetDataCollectionStatus(typeof(CharacterEntry))]
    public Flux.DataCollectionStatus CharacterCollectionStatus { get; set; } = default!;

    [Flux.GetProcessStatus]
    public ProcessStatus Status { get; set; }

    public bool Enabled => WeaponCollectionStatus.IsAvailable && CharacterCollectionStatus.IsAvailable;

    private string WandererName { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Initialize();
        await ScrapConfig.Load();
        Data = new FormData(ScrapConfig);
    }

    public bool HandleSubmit()
    {
        if (string.IsNullOrEmpty(WandererName))
            ScrapConfig.CharacterNameOverrides.Remove("Wanderer");
        else
            ScrapConfig.CharacterNameOverrides["Wanderer"] = WandererName;
        ScrapConfig.Save();
        return WeaponScrapper.Start(Data);
    }

    public override void Dispose()
    {
        base.Dispose();
        WeaponScrapper.Dispose();
    }

    private class FormData : IWeaponConfig
    {
        private readonly IWeaponConfig ScrapConfig;

        public FormData(IWeaponConfig scrapConfig)
        {
            ScrapConfig = scrapConfig;
        }

        [Display(Name = TravelerNameLabel)]
        [Required]
        public string TravelerName { get => ScrapConfig.TravelerName; set => ScrapConfig.TravelerName = value; }

        [Display(Name = WandererNameLabel)]
        public Dictionary<string, string> CharacterNameOverrides { get => ScrapConfig.CharacterNameOverrides; set => ScrapConfig.CharacterNameOverrides = value; }

        [Display(Name = MinLevelLabel)]
        [Required]
        [Range(1, 90)]
        public int WeaponMinLevel { get => ScrapConfig.WeaponMinLevel; set => ScrapConfig.WeaponMinLevel = value; }

        [Display(Name = MinRarityLabel)]
        [Required]
        [Range(1, 5)]
        public int WeaponMinRarity { get => ScrapConfig.WeaponMinRarity; set => ScrapConfig.WeaponMinRarity = value; }
    }

    private class DefaultFormData : IWeaponConfig
    {
        public string TravelerName { get; set; } = string.Empty;
        public Dictionary<string, string> CharacterNameOverrides { get; set; } = new();
        public int WeaponMinLevel { get; set; }
        public int WeaponMinRarity { get; set; }
    }
}
